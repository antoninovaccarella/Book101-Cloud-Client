{"ast":null,"code":"import { CartItem } from 'src/app/models/cart-item';\nimport { BehaviorSubject } from 'rxjs';\nimport { ORDER_API, CART_API } from 'src/app/config/api';\nimport { HttpHeaders } from '@angular/common/http';\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./token.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\nconst CART_SESSION = 'cart-session';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(httpClient, tokenService, snackBar, zone) {\n      this.httpClient = httpClient;\n      this.tokenService = tokenService;\n      this.snackBar = snackBar;\n      this.zone = zone;\n      this.total = 0;\n      this.config = new MatSnackBarConfig();\n      this.totalSubject = new BehaviorSubject(0);\n      this.cartSubject = new BehaviorSubject([]);\n      this.config.horizontalPosition = 'end';\n      this.config.verticalPosition = 'bottom';\n      this.config.duration = 5000;\n      this.config.panelClass = ['mat-snack-bar-container'];\n    }\n\n    open(message) {\n      this.zone.run(() => {\n        this.snackBar.open(message, 'X', this.config);\n      });\n    }\n\n    getTotalOb() {\n      return this.totalSubject.asObservable();\n    }\n\n    getTotal() {\n      return this.localCart.reduce((total, cartItem) => total + cartItem.product.price * cartItem.quantity, 0);\n    }\n\n    getItems() {\n      this.isLoggedIn = !!this.tokenService.getToken();\n\n      if (this.isLoggedIn) {\n        this.username = this.tokenService.getUser().username;\n        this.httpClient.get(CART_API + 'items/' + this.username, httpOptions).subscribe(data => {\n          this.localCart = data;\n          window.sessionStorage.setItem(CART_SESSION, JSON.stringify(this.localCart));\n          this.cartSubject.next(this.localCart);\n          this.total = this.getTotal();\n          this.totalSubject.next(this.total);\n        });\n      } else {\n        this.localCart = JSON.parse(window.sessionStorage.getItem(CART_SESSION)) || [];\n        window.sessionStorage.setItem(CART_SESSION, JSON.stringify(this.localCart));\n        this.cartSubject.next(this.localCart);\n        this.total = this.getTotal();\n        this.totalSubject.next(this.total);\n      }\n\n      return this.cartSubject.asObservable();\n    }\n\n    addToCart(product, quantity) {\n      const query = this.localCart.filter(c => c.product.id === product.id);\n      let newQuantity = quantity;\n\n      if (query.length !== 0 && quantity !== 0) {\n        newQuantity = quantity + query[0].quantity;\n      }\n\n      this.localCart = this.updateCart(product, newQuantity);\n      return this.localCart;\n    }\n\n    updateCart(product, quantity) {\n      this.isLoggedIn = !!this.tokenService.getToken();\n\n      if (this.isLoggedIn) {\n        this.username = this.tokenService.getUser().username;\n        this.updateRemoteCart(product, quantity).subscribe(data => {\n          this.localCart = data;\n          this.cartSubject.next(this.localCart);\n          this.total = this.getTotal();\n          this.totalSubject.next(this.total);\n          this.open('Carrello modificato con successo.');\n        }, error => {\n          this.open('Prodotto non disponibile nella quantità richiesta.');\n        });\n      } else {\n        this.localCart = this.updateLocalCart(product, quantity);\n        this.cartSubject.next(this.localCart);\n        this.total = this.getTotal();\n        this.totalSubject.next(this.total);\n      }\n\n      return this.localCart;\n    }\n\n    updateLocalCart(product, quantity) {\n      for (const ci of this.localCart) {\n        if (ci.product.id === product.id) {\n          // Valuto se modificare la quantità o rimuovere del tutto\n          if (quantity === 0) {\n            this.localCart = this.localCart.filter(cartItem => cartItem.product.id !== product.id);\n            window.sessionStorage.setItem(CART_SESSION, JSON.stringify(this.localCart));\n            this.open('Carrello modificato con successo.');\n            return this.localCart;\n          } else {\n            if (quantity < product.stock) {\n              ci.quantity = quantity;\n              window.sessionStorage.setItem(CART_SESSION, JSON.stringify(this.localCart));\n              this.open('Carrello modificato con successo.');\n              return this.localCart;\n            } else {\n              this.open('Prodotto non disponibile nella quantità richiesta.');\n              return this.localCart;\n            }\n          }\n        }\n      }\n\n      this.localCart.push(new CartItem(product, quantity));\n      window.sessionStorage.setItem(CART_SESSION, JSON.stringify(this.localCart));\n      this.open('Carrello aggiornato correttamente.');\n      return this.localCart;\n    }\n\n    updateRemoteCart(product, quantity) {\n      return this.httpClient.post(CART_API + 'items/' + this.username, {\n        product,\n        quantity\n      }, httpOptions);\n    }\n\n    buyCart(order) {\n      this.localCart = [];\n      window.sessionStorage.setItem(CART_SESSION, JSON.stringify(this.localCart));\n      return this.httpClient.post(ORDER_API + 'buy/' + this.username, order, httpOptions);\n    }\n\n    getOrders() {\n      return this.httpClient.get(ORDER_API + this.username, httpOptions);\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService), i0.ɵɵinject(i3.MatSnackBar), i0.ɵɵinject(i0.NgZone));\n  };\n\n  CartService.ɵprov = i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}