{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet MyOrdersComponent = class MyOrdersComponent {\n  constructor(cartService) {\n    this.cartService = cartService;\n    this.displayedColumns = ['purchaseTime', 'orderStatus', 'orderItems', 'paymentMethod', 'totalAmount'];\n  }\n\n  ngOnInit() {\n    this.cartService.getOrders().subscribe(orders => this.orders = orders);\n  }\n\n  convertBase64ToBlob(base64String) {\n    const byteCharacters = atob(base64String);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += 512) {\n      const slice = byteCharacters.slice(offset, offset + 512);\n      const byteNumbers = new Array(slice.length);\n\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    return new Blob(byteArrays, {\n      type: 'application/octet-stream'\n    });\n  }\n\n  downloadBinaryFile(base64String, filename) {\n    const blob = this.convertBase64ToBlob(base64String);\n    const link = document.createElement('a');\n    link.href = window.URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n  }\n\n  downloadPdf(product) {\n    const base64String = product.pdf; // Sostituisci con il tuo effettivo file base64\n\n    const filename = product.name + '.pdf'; // Sostituisci con il nome del file desiderato\n\n    this.downloadBinaryFile(base64String, filename);\n  }\n\n};\nMyOrdersComponent = __decorate([Component({\n  selector: 'app-my-orders',\n  templateUrl: './my-orders.component.html',\n  styleUrls: ['./my-orders.component.css']\n})], MyOrdersComponent);\nexport { MyOrdersComponent };","map":null,"metadata":{},"sourceType":"module"}