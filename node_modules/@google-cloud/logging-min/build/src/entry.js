"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.Entry=exports.TRACE_SAMPLED_KEY=exports.TRACE_KEY=exports.SPAN_ID_KEY=exports.SOURCE_LOCATION_KEY=exports.OPERATION_KEY=exports.LABELS_KEY=exports.INSERT_ID_KEY=void 0;const EventId=require("eventid");const extend=require("extend");const common_1=require("./utils/common");const http_request_1=require("./utils/http-request");const context_1=require("./utils/context");const eventId=new EventId;exports.INSERT_ID_KEY="logging.googleapis.com/insertId";exports.LABELS_KEY="logging.googleapis.com/labels";exports.OPERATION_KEY="logging.googleapis.com/operation";exports.SOURCE_LOCATION_KEY="logging.googleapis.com/sourceLocation";exports.SPAN_ID_KEY="logging.googleapis.com/spanId";exports.TRACE_KEY="logging.googleapis.com/trace";exports.TRACE_SAMPLED_KEY="logging.googleapis.com/trace_sampled";class Entry{constructor(metadata,data){this.metadata=extend({timestamp:new Date},metadata);this.metadata.insertId=this.metadata.insertId||eventId.new();this.data=data}toJSON(options={},projectId=""){const entry=extend(true,{},this.metadata);if(Object.prototype.toString.call(this.data)==="[object Object]"){entry.jsonPayload=common_1.objToStruct(this.data,{removeCircular:!!options.removeCircular,stringify:true})}else if(typeof this.data==="string"){entry.textPayload=this.data}if(entry.timestamp instanceof Date){const seconds=entry.timestamp.getTime()/1e3;const secondsRounded=Math.floor(seconds);entry.timestamp={seconds:secondsRounded,nanos:Math.floor((seconds-secondsRounded)*1e9)}}else if(typeof entry.timestamp==="string"){entry.timestamp=common_1.zuluToDateObj(entry.timestamp)}const req=this.metadata.httpRequest;if(http_request_1.isRawHttpRequest(req)){entry.httpRequest=http_request_1.makeHttpRequestData(req);const traceContext=this.extractTraceFromHeaders(projectId);if(traceContext){if(!this.metadata.trace&&traceContext.trace)entry.trace=traceContext.trace;if(!this.metadata.spanId&&traceContext.spanId)entry.spanId=traceContext.spanId;if(this.metadata.traceSampled===undefined)entry.traceSampled=traceContext.traceSampled}}return entry}toStructuredJSON(projectId=""){const meta=this.metadata;const{textPayload,jsonPayload,insertId,trace,spanId,traceSampled,operation,sourceLocation,labels,...validKeys}=meta;const entry=extend(true,{},validKeys);entry[exports.LABELS_KEY]=meta.labels?Object.assign({},meta.labels):undefined;entry[exports.INSERT_ID_KEY]=meta.insertId||undefined;entry[exports.TRACE_KEY]=meta.trace||undefined;entry[exports.SPAN_ID_KEY]=meta.spanId||undefined;entry[exports.TRACE_SAMPLED_KEY]="traceSampled"in meta&&meta.traceSampled!==null?meta.traceSampled:undefined;entry.message=meta.textPayload||meta.jsonPayload||meta.protoPayload||undefined;entry.message=this.data||entry.message;if(meta.timestamp instanceof Date){entry.timestamp=meta.timestamp.toISOString()}const req=meta.httpRequest;if(http_request_1.isRawHttpRequest(req)){entry.httpRequest=http_request_1.makeHttpRequestData(req);const traceContext=this.extractTraceFromHeaders(projectId);if(traceContext){if(!entry[exports.TRACE_KEY]&&traceContext.trace)entry[exports.TRACE_KEY]=traceContext.trace;if(!entry[exports.SPAN_ID_KEY]&&traceContext.spanId)entry[exports.SPAN_ID_KEY]=traceContext.spanId;if(entry[exports.TRACE_SAMPLED_KEY]===undefined)entry[exports.TRACE_SAMPLED_KEY]=traceContext.traceSampled}}return entry}extractTraceFromHeaders(projectId){const rawReq=this.metadata.httpRequest;if(rawReq&&"headers"in rawReq){return context_1.getOrInjectContext(rawReq,projectId,false)}return null}static fromApiResponse_(entry){let data=entry[entry.payload];if(entry.payload==="jsonPayload"){data=common_1.structToObj(data)}const serializedEntry=new Entry(entry,data);if(entry.timestamp){let ms=Number(entry.timestamp.seconds)*1e3;ms+=Number(entry.timestamp.nanos)/1e6;serializedEntry.metadata.timestamp=new Date(ms)}return serializedEntry}}exports.Entry=Entry;
//# sourceMappingURL=entry.js.map